// Code generated from ApiParser.g4 by ANTLR 4.13.1. DO NOT EDIT.

package api

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type ApiParserLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var ApiParserLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func apiparserlexerLexerInit() {
	staticData := &ApiParserLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'='", "'('", "')'", "'{'", "'}'", "'*'", "'['", "']'", "'returns'",
		"'-'", "'/'", "'/:'", "'@doc'", "'@handler'", "'interface{}'", "'@server'",
		"'@roles'", "'@features'", "", "", "", "", "", "", "", "'.'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "ATDOC", "ATHANDLER",
		"INTERFACE", "ATSERVER", "ATROLES", "ATFEATURES", "WS", "COMMENT", "LINE_COMMENT",
		"STRING", "RAW_STRING", "LINE_VALUE", "ID", "DOT", "LetterOrDigit",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "ATDOC", "ATHANDLER", "INTERFACE", "ATSERVER",
		"ATROLES", "ATFEATURES", "WS", "COMMENT", "LINE_COMMENT", "STRING",
		"RAW_STRING", "LINE_VALUE", "ID", "DOT", "LetterOrDigit", "ExponentPart",
		"EscapeSequence", "HexDigits", "HexDigit", "Digits", "Letter",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 27, 287, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3,
		1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8,
		1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11,
		1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1,
		13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14,
		1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1,
		15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17,
		1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 4,
		18, 151, 8, 18, 11, 18, 12, 18, 152, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19,
		1, 19, 5, 19, 161, 8, 19, 10, 19, 12, 19, 164, 9, 19, 1, 19, 1, 19, 1,
		19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 5, 20, 175, 8, 20, 10, 20,
		12, 20, 178, 9, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 5, 21, 185, 8, 21,
		10, 21, 12, 21, 188, 9, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 4, 22, 195,
		8, 22, 11, 22, 12, 22, 196, 1, 22, 1, 22, 1, 23, 1, 23, 5, 23, 203, 8,
		23, 10, 23, 12, 23, 206, 9, 23, 1, 23, 1, 23, 5, 23, 210, 8, 23, 10, 23,
		12, 23, 213, 9, 23, 3, 23, 215, 8, 23, 1, 24, 1, 24, 5, 24, 219, 8, 24,
		10, 24, 12, 24, 222, 9, 24, 1, 25, 1, 25, 1, 26, 1, 26, 3, 26, 228, 8,
		26, 1, 27, 1, 27, 3, 27, 232, 8, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28,
		1, 28, 3, 28, 240, 8, 28, 1, 28, 3, 28, 243, 8, 28, 1, 28, 1, 28, 1, 28,
		4, 28, 248, 8, 28, 11, 28, 12, 28, 249, 1, 28, 1, 28, 1, 28, 1, 28, 1,
		28, 3, 28, 257, 8, 28, 1, 29, 1, 29, 1, 29, 5, 29, 262, 8, 29, 10, 29,
		12, 29, 265, 9, 29, 1, 29, 3, 29, 268, 8, 29, 1, 30, 1, 30, 1, 31, 1, 31,
		5, 31, 274, 8, 31, 10, 31, 12, 31, 277, 9, 31, 1, 31, 3, 31, 280, 8, 31,
		1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 286, 8, 32, 1, 162, 0, 33, 1, 1, 3,
		2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12,
		25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21,
		43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 0, 57, 0, 59, 0, 61,
		0, 63, 0, 65, 0, 1, 0, 18, 3, 0, 9, 10, 12, 13, 32, 32, 2, 0, 10, 10, 13,
		13, 2, 0, 34, 34, 92, 92, 4, 0, 10, 10, 13, 13, 92, 92, 96, 96, 2, 0, 9,
		9, 32, 32, 4, 0, 10, 10, 13, 13, 34, 34, 96, 96, 1, 0, 48, 57, 2, 0, 69,
		69, 101, 101, 2, 0, 43, 43, 45, 45, 8, 0, 34, 34, 39, 39, 92, 92, 98, 98,
		102, 102, 110, 110, 114, 114, 116, 116, 1, 0, 48, 51, 1, 0, 48, 55, 3,
		0, 48, 57, 65, 70, 97, 102, 2, 0, 48, 57, 95, 95, 4, 0, 36, 36, 65, 90,
		95, 95, 97, 122, 2, 0, 0, 127, 55296, 56319, 1, 0, 55296, 56319, 1, 0,
		56320, 57343, 305, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0,
		0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0,
		0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0,
		0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1,
		0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37,
		1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0,
		45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0,
		0, 53, 1, 0, 0, 0, 1, 67, 1, 0, 0, 0, 3, 69, 1, 0, 0, 0, 5, 71, 1, 0, 0,
		0, 7, 73, 1, 0, 0, 0, 9, 75, 1, 0, 0, 0, 11, 77, 1, 0, 0, 0, 13, 79, 1,
		0, 0, 0, 15, 81, 1, 0, 0, 0, 17, 83, 1, 0, 0, 0, 19, 91, 1, 0, 0, 0, 21,
		93, 1, 0, 0, 0, 23, 95, 1, 0, 0, 0, 25, 98, 1, 0, 0, 0, 27, 103, 1, 0,
		0, 0, 29, 112, 1, 0, 0, 0, 31, 124, 1, 0, 0, 0, 33, 132, 1, 0, 0, 0, 35,
		139, 1, 0, 0, 0, 37, 150, 1, 0, 0, 0, 39, 156, 1, 0, 0, 0, 41, 170, 1,
		0, 0, 0, 43, 181, 1, 0, 0, 0, 45, 191, 1, 0, 0, 0, 47, 200, 1, 0, 0, 0,
		49, 216, 1, 0, 0, 0, 51, 223, 1, 0, 0, 0, 53, 227, 1, 0, 0, 0, 55, 229,
		1, 0, 0, 0, 57, 256, 1, 0, 0, 0, 59, 258, 1, 0, 0, 0, 61, 269, 1, 0, 0,
		0, 63, 271, 1, 0, 0, 0, 65, 285, 1, 0, 0, 0, 67, 68, 5, 61, 0, 0, 68, 2,
		1, 0, 0, 0, 69, 70, 5, 40, 0, 0, 70, 4, 1, 0, 0, 0, 71, 72, 5, 41, 0, 0,
		72, 6, 1, 0, 0, 0, 73, 74, 5, 123, 0, 0, 74, 8, 1, 0, 0, 0, 75, 76, 5,
		125, 0, 0, 76, 10, 1, 0, 0, 0, 77, 78, 5, 42, 0, 0, 78, 12, 1, 0, 0, 0,
		79, 80, 5, 91, 0, 0, 80, 14, 1, 0, 0, 0, 81, 82, 5, 93, 0, 0, 82, 16, 1,
		0, 0, 0, 83, 84, 5, 114, 0, 0, 84, 85, 5, 101, 0, 0, 85, 86, 5, 116, 0,
		0, 86, 87, 5, 117, 0, 0, 87, 88, 5, 114, 0, 0, 88, 89, 5, 110, 0, 0, 89,
		90, 5, 115, 0, 0, 90, 18, 1, 0, 0, 0, 91, 92, 5, 45, 0, 0, 92, 20, 1, 0,
		0, 0, 93, 94, 5, 47, 0, 0, 94, 22, 1, 0, 0, 0, 95, 96, 5, 47, 0, 0, 96,
		97, 5, 58, 0, 0, 97, 24, 1, 0, 0, 0, 98, 99, 5, 64, 0, 0, 99, 100, 5, 100,
		0, 0, 100, 101, 5, 111, 0, 0, 101, 102, 5, 99, 0, 0, 102, 26, 1, 0, 0,
		0, 103, 104, 5, 64, 0, 0, 104, 105, 5, 104, 0, 0, 105, 106, 5, 97, 0, 0,
		106, 107, 5, 110, 0, 0, 107, 108, 5, 100, 0, 0, 108, 109, 5, 108, 0, 0,
		109, 110, 5, 101, 0, 0, 110, 111, 5, 114, 0, 0, 111, 28, 1, 0, 0, 0, 112,
		113, 5, 105, 0, 0, 113, 114, 5, 110, 0, 0, 114, 115, 5, 116, 0, 0, 115,
		116, 5, 101, 0, 0, 116, 117, 5, 114, 0, 0, 117, 118, 5, 102, 0, 0, 118,
		119, 5, 97, 0, 0, 119, 120, 5, 99, 0, 0, 120, 121, 5, 101, 0, 0, 121, 122,
		5, 123, 0, 0, 122, 123, 5, 125, 0, 0, 123, 30, 1, 0, 0, 0, 124, 125, 5,
		64, 0, 0, 125, 126, 5, 115, 0, 0, 126, 127, 5, 101, 0, 0, 127, 128, 5,
		114, 0, 0, 128, 129, 5, 118, 0, 0, 129, 130, 5, 101, 0, 0, 130, 131, 5,
		114, 0, 0, 131, 32, 1, 0, 0, 0, 132, 133, 5, 64, 0, 0, 133, 134, 5, 114,
		0, 0, 134, 135, 5, 111, 0, 0, 135, 136, 5, 108, 0, 0, 136, 137, 5, 101,
		0, 0, 137, 138, 5, 115, 0, 0, 138, 34, 1, 0, 0, 0, 139, 140, 5, 64, 0,
		0, 140, 141, 5, 102, 0, 0, 141, 142, 5, 101, 0, 0, 142, 143, 5, 97, 0,
		0, 143, 144, 5, 116, 0, 0, 144, 145, 5, 117, 0, 0, 145, 146, 5, 114, 0,
		0, 146, 147, 5, 101, 0, 0, 147, 148, 5, 115, 0, 0, 148, 36, 1, 0, 0, 0,
		149, 151, 7, 0, 0, 0, 150, 149, 1, 0, 0, 0, 151, 152, 1, 0, 0, 0, 152,
		150, 1, 0, 0, 0, 152, 153, 1, 0, 0, 0, 153, 154, 1, 0, 0, 0, 154, 155,
		6, 18, 0, 0, 155, 38, 1, 0, 0, 0, 156, 157, 5, 47, 0, 0, 157, 158, 5, 42,
		0, 0, 158, 162, 1, 0, 0, 0, 159, 161, 9, 0, 0, 0, 160, 159, 1, 0, 0, 0,
		161, 164, 1, 0, 0, 0, 162, 163, 1, 0, 0, 0, 162, 160, 1, 0, 0, 0, 163,
		165, 1, 0, 0, 0, 164, 162, 1, 0, 0, 0, 165, 166, 5, 42, 0, 0, 166, 167,
		5, 47, 0, 0, 167, 168, 1, 0, 0, 0, 168, 169, 6, 19, 1, 0, 169, 40, 1, 0,
		0, 0, 170, 171, 5, 47, 0, 0, 171, 172, 5, 47, 0, 0, 172, 176, 1, 0, 0,
		0, 173, 175, 8, 1, 0, 0, 174, 173, 1, 0, 0, 0, 175, 178, 1, 0, 0, 0, 176,
		174, 1, 0, 0, 0, 176, 177, 1, 0, 0, 0, 177, 179, 1, 0, 0, 0, 178, 176,
		1, 0, 0, 0, 179, 180, 6, 20, 1, 0, 180, 42, 1, 0, 0, 0, 181, 186, 5, 34,
		0, 0, 182, 185, 8, 2, 0, 0, 183, 185, 3, 57, 28, 0, 184, 182, 1, 0, 0,
		0, 184, 183, 1, 0, 0, 0, 185, 188, 1, 0, 0, 0, 186, 184, 1, 0, 0, 0, 186,
		187, 1, 0, 0, 0, 187, 189, 1, 0, 0, 0, 188, 186, 1, 0, 0, 0, 189, 190,
		5, 34, 0, 0, 190, 44, 1, 0, 0, 0, 191, 194, 5, 96, 0, 0, 192, 195, 8, 3,
		0, 0, 193, 195, 3, 57, 28, 0, 194, 192, 1, 0, 0, 0, 194, 193, 1, 0, 0,
		0, 195, 196, 1, 0, 0, 0, 196, 194, 1, 0, 0, 0, 196, 197, 1, 0, 0, 0, 197,
		198, 1, 0, 0, 0, 198, 199, 5, 96, 0, 0, 199, 46, 1, 0, 0, 0, 200, 204,
		5, 58, 0, 0, 201, 203, 7, 4, 0, 0, 202, 201, 1, 0, 0, 0, 203, 206, 1, 0,
		0, 0, 204, 202, 1, 0, 0, 0, 204, 205, 1, 0, 0, 0, 205, 214, 1, 0, 0, 0,
		206, 204, 1, 0, 0, 0, 207, 215, 3, 43, 21, 0, 208, 210, 8, 5, 0, 0, 209,
		208, 1, 0, 0, 0, 210, 213, 1, 0, 0, 0, 211, 209, 1, 0, 0, 0, 211, 212,
		1, 0, 0, 0, 212, 215, 1, 0, 0, 0, 213, 211, 1, 0, 0, 0, 214, 207, 1, 0,
		0, 0, 214, 211, 1, 0, 0, 0, 215, 48, 1, 0, 0, 0, 216, 220, 3, 65, 32, 0,
		217, 219, 3, 53, 26, 0, 218, 217, 1, 0, 0, 0, 219, 222, 1, 0, 0, 0, 220,
		218, 1, 0, 0, 0, 220, 221, 1, 0, 0, 0, 221, 50, 1, 0, 0, 0, 222, 220, 1,
		0, 0, 0, 223, 224, 5, 46, 0, 0, 224, 52, 1, 0, 0, 0, 225, 228, 3, 65, 32,
		0, 226, 228, 7, 6, 0, 0, 227, 225, 1, 0, 0, 0, 227, 226, 1, 0, 0, 0, 228,
		54, 1, 0, 0, 0, 229, 231, 7, 7, 0, 0, 230, 232, 7, 8, 0, 0, 231, 230, 1,
		0, 0, 0, 231, 232, 1, 0, 0, 0, 232, 233, 1, 0, 0, 0, 233, 234, 3, 63, 31,
		0, 234, 56, 1, 0, 0, 0, 235, 236, 5, 92, 0, 0, 236, 257, 7, 9, 0, 0, 237,
		242, 5, 92, 0, 0, 238, 240, 7, 10, 0, 0, 239, 238, 1, 0, 0, 0, 239, 240,
		1, 0, 0, 0, 240, 241, 1, 0, 0, 0, 241, 243, 7, 11, 0, 0, 242, 239, 1, 0,
		0, 0, 242, 243, 1, 0, 0, 0, 243, 244, 1, 0, 0, 0, 244, 257, 7, 11, 0, 0,
		245, 247, 5, 92, 0, 0, 246, 248, 5, 117, 0, 0, 247, 246, 1, 0, 0, 0, 248,
		249, 1, 0, 0, 0, 249, 247, 1, 0, 0, 0, 249, 250, 1, 0, 0, 0, 250, 251,
		1, 0, 0, 0, 251, 252, 3, 61, 30, 0, 252, 253, 3, 61, 30, 0, 253, 254, 3,
		61, 30, 0, 254, 255, 3, 61, 30, 0, 255, 257, 1, 0, 0, 0, 256, 235, 1, 0,
		0, 0, 256, 237, 1, 0, 0, 0, 256, 245, 1, 0, 0, 0, 257, 58, 1, 0, 0, 0,
		258, 267, 3, 61, 30, 0, 259, 262, 3, 61, 30, 0, 260, 262, 5, 95, 0, 0,
		261, 259, 1, 0, 0, 0, 261, 260, 1, 0, 0, 0, 262, 265, 1, 0, 0, 0, 263,
		261, 1, 0, 0, 0, 263, 264, 1, 0, 0, 0, 264, 266, 1, 0, 0, 0, 265, 263,
		1, 0, 0, 0, 266, 268, 3, 61, 30, 0, 267, 263, 1, 0, 0, 0, 267, 268, 1,
		0, 0, 0, 268, 60, 1, 0, 0, 0, 269, 270, 7, 12, 0, 0, 270, 62, 1, 0, 0,
		0, 271, 279, 7, 6, 0, 0, 272, 274, 7, 13, 0, 0, 273, 272, 1, 0, 0, 0, 274,
		277, 1, 0, 0, 0, 275, 273, 1, 0, 0, 0, 275, 276, 1, 0, 0, 0, 276, 278,
		1, 0, 0, 0, 277, 275, 1, 0, 0, 0, 278, 280, 7, 6, 0, 0, 279, 275, 1, 0,
		0, 0, 279, 280, 1, 0, 0, 0, 280, 64, 1, 0, 0, 0, 281, 286, 7, 14, 0, 0,
		282, 286, 8, 15, 0, 0, 283, 284, 7, 16, 0, 0, 284, 286, 7, 17, 0, 0, 285,
		281, 1, 0, 0, 0, 285, 282, 1, 0, 0, 0, 285, 283, 1, 0, 0, 0, 286, 66, 1,
		0, 0, 0, 24, 0, 152, 162, 176, 184, 186, 194, 196, 204, 211, 214, 220,
		227, 231, 239, 242, 249, 256, 261, 263, 267, 275, 279, 285, 2, 0, 1, 0,
		0, 88, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ApiParserLexerInit initializes any static state used to implement ApiParserLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewApiParserLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func ApiParserLexerInit() {
	staticData := &ApiParserLexerLexerStaticData
	staticData.once.Do(apiparserlexerLexerInit)
}

// NewApiParserLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewApiParserLexer(input antlr.CharStream) *ApiParserLexer {
	ApiParserLexerInit()
	l := new(ApiParserLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &ApiParserLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "ApiParser.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ApiParserLexer tokens.
const (
	ApiParserLexerT__0          = 1
	ApiParserLexerT__1          = 2
	ApiParserLexerT__2          = 3
	ApiParserLexerT__3          = 4
	ApiParserLexerT__4          = 5
	ApiParserLexerT__5          = 6
	ApiParserLexerT__6          = 7
	ApiParserLexerT__7          = 8
	ApiParserLexerT__8          = 9
	ApiParserLexerT__9          = 10
	ApiParserLexerT__10         = 11
	ApiParserLexerT__11         = 12
	ApiParserLexerATDOC         = 13
	ApiParserLexerATHANDLER     = 14
	ApiParserLexerINTERFACE     = 15
	ApiParserLexerATSERVER      = 16
	ApiParserLexerATROLES       = 17
	ApiParserLexerATFEATURES    = 18
	ApiParserLexerWS            = 19
	ApiParserLexerCOMMENT       = 20
	ApiParserLexerLINE_COMMENT  = 21
	ApiParserLexerSTRING        = 22
	ApiParserLexerRAW_STRING    = 23
	ApiParserLexerLINE_VALUE    = 24
	ApiParserLexerID            = 25
	ApiParserLexerDOT           = 26
	ApiParserLexerLetterOrDigit = 27
)

const COMEMNTS = 88
